{"mappings":"YAsKA,IAAMA,EAAM,CACVC,KAAMC,SAASC,cAAc,mBAC7BC,KAAMF,SAASC,cAAc,aAE/BH,EAAKC,KAAKI,iBAAiB,UAC3B,SAAsBC,GACtBA,EAAEC,iBACF,IAAqBC,EAAAF,EAAEG,cAAcC,SAA9BC,EAAcH,EAAdG,MAxBP,SAAuBC,EAAMD,GACzB,IAEME,EAAW,IAAIC,gBAAgB,CACnCC,EAAGH,EACHD,OACAK,KAAM,KACNC,IALS,oCAOX,OAAOC,MAAM,GAAUC,OARX,6CAQQ,KAAYA,OAATN,IAAYO,MAAK,SAACC,GACvC,IAAKA,EAAIC,OACP,MAAM,IAAIC,MAAMF,EAAIG,YAEtB,OAAOH,EAAII,M,KAajBC,CAFqBlB,EAARI,KAEMe,MAAOhB,EAAKgB,OAAOP,MAAK,SAACQ,GACzC5B,EAAKI,KAAKyB,UAAyBD,EAAKE,SAASC,YAO3CC,KACC,SAACC,G,MACC,kDACyCd,OAA/Bc,EAAGC,IAAIC,UAAUC,KAAK,WACfjB,OADwBc,EAAGC,IAAIC,UAAUE,KAAK,wDAEtClB,OADRc,EAAGK,KAAK,8CAEDnB,OADCc,EAAGC,IAAIC,UAAUE,KAAK,6CACNlB,OAAjBc,EAAGC,IAAIK,UAAU,wB,IAG5CC,KAAK,IAfXxC,EAAKC,KAAKwC,O","sources":["src/learning16/script.js"],"sourcesContent":["// *********Links********* \\\\\n// https://www.postman.com/downloads/\n// https://rickandmortyapi.com/documentation\n// https://www.weatherapi.com/docs/\n\n// Приклад документації до API\n// https://rickandmortyapi.com/documentation/#rest\n\n// *********Показати роботу з Postman********* \\\\\n// https://www.postman.com/downloads/\n\n// *********Fetch********* \\\\\n\n// *********Обробка помилок та парсинг відповіді********* \\\\\n\n// ***************Практика*************** \\\\\n\n// Потрібно створити функціонал для отримання прогнозу погоди в місті.\n// Використай публічне API https://www.weatherapi.com/docs/\n// Використовуй ендпоінт Forecast для того, щоб отримати прогноз погоди на декілька днів.\n\n// Створи форму в яку користувач:\n// 1 вводить назву міста.\n// 2 обирає на яку кількість днів він хоче отримати прогноз погоди (3, 5 та 7 днів).\n// (Іноді параметр не працює в такому випадку можна зробити пошук на 1, 2 та 3 дні)\n\n// Після сабміту форми відмалюй картки з інформацією отриманою з бекенду.\n// Картка має містити відомості про:\n// 1 Зображення з погодою (icon)\n// 2 Текст з погодою (text)\n// 3 Дату (date)\n// 4 Середню температуру в Цельсія (avgtemp_c)\n// function serviceWeather(city, days) {\n//   const URL = \"http://api.weatherapi.com/v1/forecast.json\";\n//   const KEY = \"66f9e81543404d02beb160521230808\";\n//   const params = new URLSearchParams({\n//     key: KEY,\n//     q: city,\n//     days,\n//     lang: \"uk\",\n//   });\n//   return fetch(`${URL}?${params}`).then((res) => {\n//     if (!res.ok) {\n//       throw new Error(res.statusText);\n//     }\n//     return res.json();\n//   });\n// }\n// serviceWeather(\"Kiev\", 3)\n//   .then((data) => console.log(data))\n//   .catch((err) => console.error(err));\n\n// const refs = {\n//   form: document.querySelector(\".js-search-form\"),\n//   list: document.querySelector(\".js-list\"),\n// };\n// refs.form.addEventListener(\"submit\", onSubmit);\n// function onSubmit(e) {\n//   e.preventDefault();\n//   const { city, days } = refs.form.elements;\n//   console.log(city.value, days.value);\n\n//   serviceWeather(city.value, days.value)\n//     .then((data) => (refs.list.innerHTML = data.forecast.forecastday))\n//     .catch((err) => err);\n// }\n// function creat(arr) {\n//   return arr.map({ date, day: { ava } });\n// }\n// const refs = {\n//   searchForm: document.getElementById(\"searchForm\"),\n//   list: document.getElementById(\"list\"),\n// };\n\n// refs.searchForm.addEventListener(\"submit\", searchWeater);\n\n// function searchWeater(e) {\n//   e.preventDefault();\n\n//   const { city, days } = e.currentTarget.elements;\n//   // const city = refs.searchForm.elements.city\n\n//   return fetch(`${FORECAST_URL}?${params}`).then((res) => {\n//     if (!res.ok) {\n//       throw new Error(res.statusText);\n//     }\n//     return res.json();\n//   });\n// }\n// serviceWeather(\"German\", 2);\n//\n\n// function createWether(city, days) {\n//     const url = \"http://api.weatherapi.com/v1/forecast.json\";\n//     const ke = \"8412dc81021d484f8ff184337230908\";\n//     const parametr = new URLSearchParams({\n//       q: city,\n//       days,\n//       lang: \"uk\",\n//       key: ke,\n//     });\n//     return fetch(`${url}?${parametr}`).then((res) => {\n//       if (!res.status) {\n//         throw new Error(res.statusText);\n//       }\n//       return res.json();\n//     });\n//   }\n//   // createWether(\"Kiev\", 3)\n//   //   .then((res) => console.log(res))\n//   //   .catch((err) => console.log(err));\n//   const refs = {\n//     list: document.querySelector(\".js-list\"),\n//     form: document.querySelector(\".js-search-form\"),\n//   };\n  \n//   refs.form.addEventListener(\"submit\", onSubmit);\n//   function onSubmit(e) {\n//     const { days, city } = e.currentTarget.elements;\n//     console.log(days.value);\n//     console.log(city.value);\n//     e.preventDefault();\n//     createWether(city.value, days.value)\n//       .then((data) => {\n//         refs.list.innerHTML = createMarkup(data.forecast.forecastday);\n//         //   console.log(data.forecast.forecastday);\n//       })\n//       .catch((err) => console.error(err));\n//   }\n//   function createMarkup(arr) {\n//     return arr\n//       .map(\n//         ({\n//           date,\n//           day: {\n//             condition: { text, icon },\n//             avgtemp_c,\n//           },\n//         }) =>\n//           `<li class=\"weather-card\">\n//         <img src=\"${icon}\" alt=\"${text}\" class=\"weather-icon\">\n//         <h2 class=\"date\">${date}</h2>\n//         <h3 class=\"weather-text\">${text}</h3>\n//         <h3 class=\"temperature\">${avgtemp_c} °C</h3>\n//     </li>`\n//       )\n//       .join(\"\");\n//   }\n\nfunction createWeather(city, days){\n    const url = \"http://api.weatherapi.com/v1/forecast.json\";\n    const ke = \"8412dc81021d484f8ff184337230908\";\n    const parametr = new URLSearchParams({\n      q: city,\n      days,\n      lang: \"uk\",\n      key: ke,\n    });\n    return fetch(`${url}?${parametr}`).then((res) => {\n      if (!res.status) {\n        throw new Error(res.statusText);\n      }\n      return res.json();\n    });\n\n}\nconst refs ={\n  form: document.querySelector('.js-search-form'),\n  list: document.querySelector('.js-list')\n}\nrefs.form.addEventListener('submit', onSubmitForm )\nfunction onSubmitForm(e){\ne.preventDefault()\nconst {days, city} = e.currentTarget.elements\n// console.log(typeof(Number(days.value)))\ncreateWeather(city.value, days.value).then((data) => {\n   refs.list.innerHTML = createMarkup(data.forecast.forecastday)\n   refs.form.reset()\n  })\n\n}\nfunction createMarkup(arr) {\n      return arr\n        .map(\n          (el) =>\n            `<li class=\"weather-card\">\n          <img src=\"${el.day.condition.icon}\" alt=\"${el.day.condition.text}\" class=\"weather-icon\">\n          <h2 class=\"date\">${el.date}</h2>\n          <h3 class=\"weather-text\">${el.day.condition.text}</h3>\n          <h3 class=\"temperature\">${el.day.avgtemp_c} °C</h3>\n      </li>`\n        )\n        .join(\"\");\n    }\n"],"names":["$7bfaf4c0d0ed9a90$var$refs","form","document","querySelector","list","addEventListener","e","preventDefault","_elements","currentTarget","elements","days","city","parametr","URLSearchParams","q","lang","key","fetch","concat","then","res","status","Error","statusText","json","$7bfaf4c0d0ed9a90$var$createWeather","value","data","innerHTML","forecast","forecastday","map","el","day","condition","icon","text","date","avgtemp_c","join","reset"],"version":3,"file":"index.17f01b07.js.map"}